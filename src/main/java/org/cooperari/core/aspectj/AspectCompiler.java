//
//   Copyright 2014-2019 Eduardo R. B. Marques
//
//  Licensed under the Apache License, Version 2.0 (the "License");
//  you may not use this file except in compliance with the License.
//  You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
//  Unless required by applicable law or agreed to in writing, software
//  distributed under the License is distributed on an "AS IS" BASIS,
//  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//  See the License for the specific language governing permissions and
//  limitations under the License.
//

package org.cooperari.core.aspectj;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;
import java.util.List;
import java.util.jar.JarEntry;
import java.util.jar.JarOutputStream;

import org.cooperari.core.util.IO;

/**
 * 
 * Wrapper class for invocation of the AspectJ compiler.
 * 
 * @since 0.2
 *
 */
public final class AspectCompiler {

  /**
   * @param aspectClasses Aspect classes to compile.
   * @param options Compiler options.
   * @param ajcInputFile Name of input JAR file to group aspect classes (this is
   *        generated by the method internally).
   * @param ajcOutputFile Output JAR file.
   * @param ajcMsgs List object to hold compiler messages.
   * @return <code>true</code> if compilation executed without errors,
   *         <code>false</code> otherwise.
   * @throws IOException if an I/O error occurs.
   */
  public static boolean compile(Collection<Class<?>> aspectClasses,
      String options, File ajcInputFile, File ajcOutputFile, List<String> ajcMsgs) throws IOException {

    // 1. Prepare input JAR for AJC
    JarOutputStream jos = new JarOutputStream(new FileOutputStream(ajcInputFile));

    try {
      // Copy the aspects classes (in annotation-style) to the input JAR.
      for (Class<?> c : aspectClasses) {
        String entryName = c.getCanonicalName().replace('.', '/')
            .concat(".class");
        jos.putNextEntry(new JarEntry(entryName));
        InputStream is = c.getClassLoader().getResourceAsStream(entryName);
        IO.bCopy(is, jos);
        is.close();
        jos.closeEntry();
      }
    } finally {
      jos.close();
    }
    // 2. Call AJC
    String[] ajcArgs = String.format(
        "-8 -Xjoinpoints:synchronization -injars %s -outjar %s %s",
        ajcInputFile.getAbsolutePath(), ajcOutputFile.getAbsolutePath(), options)
        .split(" ");

    ajcMsgs.clear();
    int nErrors = org.aspectj.tools.ajc.Main.bareMain(ajcArgs, false, ajcMsgs,
        ajcMsgs, ajcMsgs, ajcMsgs);
    // 3. Return true if no errors reported.
    return nErrors == 0;
  }

  /**
   * Private constructor to prevent instantiation.
   */
  private AspectCompiler() {

  }
}
