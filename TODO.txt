== 0.2.1. final ==

Features left to implement:
- Revise Coverage/CoveragePolicy code
- Make sure yield points marked as unreached are not false negatives
- cjava utility
- javadoc / source / deploy maven targets
- update scripts to disable assertions in org.cooperari 
- operation arguments (yes/no? if yes at least written to trace)
- CSystem.runPreemptively() 

Maybe:
- cjunit/cjava -p switch / ensure CJUnitRunner runs preemptively as well (maybe)
- tools package organized differently (?)
- @CKeepGoing 
- make cjunit/cjava invoke csetup to move indirection
- Windows scripts

- Examples:
  Herlihy and Wing Queue.
  http://arxiv.org/pdf/1502.07639.pdf

https://bugs.openjdk.java.net/browse/JDK-4334376
https://bugs.openjdk.java.net/browse/JDK-4810210

Misc. implementation details
 -- Merge CRuntime / CSession ? Feature life-cycle revision.
 -- Get rid of Scheduler.wakeup() interaction
 -- operation arguments
 -- resource deadlocks / wait release step ?
 -- improve wait/notify tests + check tests being ignored
 -- CBlockingOperationResult used more often (sleep, join, ..., also)
 -- Optimise CScheduler operation using CBlockingOperation interface / base class?
 -- Inline yield points - refactoring
 -- feature package names ?
 -- serial ids for exception classes
 -- make CSystem.generateGlobalCoverageReport() call optional


Future workloads:
- Examples project
- Site organization.

== 0.3 ==

Sketch of desired features:
- verification package (generalization of hotspot functionality)
  -- @CPre @CPost @CInvariant @CFieldProperty 
-- Important 
 - java.util.concurrent (Cyclic Barrier, phaser, etc)
 - CScheduler more efficient
-- Think about ...
 - java.io ? 
 - java.net ? 
 - reinstate randomized testing profile
